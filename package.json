{
  "name": "paste-replaced",
  "displayName": "Paste Replaced",
  "description": "Paste text replaced using regular expressions that you configure, anywhere in VS Code, not just the editors. E.g. ood for fast typing canned text in your presentations and a lot of other cases.",
  "version": "1.1.3",
  "publisher": "betterthantomorrow",
  "author": {
    "name": "Peter Strömberg",
    "email": "pez@pezius.com"
  },
  "icon": "assets/paste-replaced-icon-128x128.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/PEZ/paste-replaced.git"
  },
  "engines": {
    "vscode": "^1.67.2"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "Presentation",
    "Clipboard",
    "Paste",
    "Regex",
    "Fast Typing",
    "Canned",
    "Replace",
    "Substitute"
  ],
  "activationEvents": [
    "onCommand:paste-replaced.paste",
    "onCommand:paste-replaced.selectAllAndPasteReplaced",
    "onCommand:paste-replaced.selectWordLeftAndPasteReplaced"
  ],
  "main": "extension.js",
  "contributes": {
    "commands": [
      {
        "command": "paste-replaced.paste",
        "category": "Paste Replaced",
        "title": "Paste"
      },
      {
        "command": "paste-replaced.selectAllAndPasteReplaced",
        "category": "Paste Replaced",
        "title": "Select and Copy All Text and Paste"
      },
      {
        "command": "paste-replaced.selectWordLeftAndPasteReplaced",
        "category": "Paste Replaced",
        "title": "Select and Copy Word Left and Paste"
      },
      {
        "command": "paste-replaced.interruptTyping",
        "category": "Paste Replaced",
        "title": "Interrupt ongoing typing",
        "enablement": "paste-replaced.isTyping"
      }
    ],
    "keybindings": [
      {
        "command": "paste-replaced.paste",
        "key": "ctrl+alt+v v"
      },
      {
        "command": "paste-replaced.selectAllAndPasteReplaced",
        "key": "ctrl+alt+v ctrl+alt+v",
        "when": "!editorTextFocus"
      },
      {
        "command": "paste-replaced.selectWordLeftAndPasteReplaced",
        "key": "ctrl+alt+v ctrl+alt+v",
        "when": "editorTextFocus"
      },
      {
        "command": "paste-replaced.interruptTyping",
        "key": "ctrl+alt+v escape",
        "when": "paste-replaced.isTyping"
      }
    ],
    "configuration": [
      {
        "type": "object",
        "title": "Paste Replaced",
        "properties": {
          "paste-replaced.replacers": {
            "type": "array",
            "markdownDescription": "An array of arrays of `[search, replace, flags?]` tuples. _**NB:** Only the first array will be used by the extension. Use the other ”slots” to have a way to save patterns that are not currently active._",
            "items": {
              "type": "array",
              "markdownDescription": "An array of `[search, replace, flags?]` tuples. These will be applied to the text in the order they are configured.",
              "items": {
                "type": "array",
                "markdownDescription": "A `[search, replace, flags?]` tuple where `search` is a string that compiles to a JS regex pattern, `replace` is a string that compiles to a regex replace pattern, and `flags?` is an optional string of regex flags. Only the first occurrence of `search` will be replaced by `replace`, unless the `g` flag is provided.",
                "minItems": 2,
                "maxItems": 3
              }
            }
          },
          "paste-replaced.simulateTypingSpeed": {
            "type": "string",
            "markdownDescription": "Should the text be inserted simulating that it is being ”typed” in? If so, how fast should the typing be?",
            "enum": [
              "instant",
              "fast",
              "intermediate",
              "slow"
            ],
            "enumDescriptions": [
              "Don't simulate typing, just paste it all",
              "Pour the text in fast",
              "Type the text neither fast, nor slow",
              "Slowly type the text in"
            ],
            "default": "instant"
          }
        }
      }
    ]
  },
  "scripts": {
    "clean": "rimraf .cpcache .shadow-cljs/ out/",
    "watch": "npx shadow-cljs -d cider/cider-nrepl:0.27.4 watch :extension",
    "prewatch": "npm run clean",
    "compile": "npx shadow-cljs compile :extension",
    "release": "npx shadow-cljs release :extension",
    "package": "npx vsce package --allow-star-activation",
    "vscode:prepublish": "npm run clean && npm run release"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.30"
  },
  "devDependencies": {
    "rimraf": "^3.0.2",
    "shadow-cljs": "^2.18.0",
    "vsce": "^2.7.0"
  }
}